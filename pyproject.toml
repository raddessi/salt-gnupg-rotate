[project]
name = "salt-gnupg-rotate"
requires-python = ">=3.8"

# Poetry package config
[tool.poetry]
name = "salt-gnupg-rotate"
version = "1.3.2"
description = "Easily rotate gnupg encryption keys of fully or partially encrypted files."
authors = ["Ryan Addessi <raddessi@users.noreply.github.com>"]
license = "BSD 2-Clause 'Simplified' License"
readme = "README.md"
repository = "https://github.com/raddessi/salt-gnupg-rotate"
homepage = "https://github.com/raddessi/salt-gnupg-rotate"
keywords = []
packages = [{ include = "salt_gnupg_rotate" }]
classifiers = []

[tool.poetry.dependencies]
python = "^3.8"
click = "^8.1.7"
rich = ">=13.7.1"
python-gnupg = ">=0.5.2"
sphinx-click = "^6.0.0"

[tool.poetry.dev-dependencies]
"ruamel.yaml" = ">=0.18.6"
coverage = {extras = ["toml"], version = ">=7.4.4"}
furo = ">=2024.1.29"
jinja2-time = ">=0.2.0"
mypy = ">=1.9.0"
myst-parser = ">=2.0.0"
nox = ">=2024.4.15"
nox-poetry = ">=1.0.3"
pre-commit = [
    {version = ">=2.16.0", python = "<3.9"},
    {version = ">=2.16.0", python = ">=3.9"},
]
pytest = ">=8.1.1"
pytest-mock = ">=3.14.0"
safety = ">=3.1.0"
sphinx = [
    {version = ">=4.3.2", python = "<3.9"},
    {version = ">=4.3.2", python = ">=3.9"},
]
sphinx-autobuild = [
    {version = ">=2021.3.14", python = "<3.9"},
    {version = ">=2021.3.14", python = ">=3.9"},
]
sphinx-click = ">=5.1.0"
sphinx-copybutton = ">=0.5.2"
sphinx-inline-tabs = {version = ">=2023.4.21", python = ">=3.8,<4.0"}
sphinxcontrib-mermaid = ">=0.9.2"
sphinxcontrib-spelling = ">=8.0.0"
sphinxcontrib-versioning = "2.2.1"
sphinxemoji = [
    {version = "<3", python = "<3.9"},
    {version = "0.3.1", python = ">=3.9"},
]
typeguard = "^4.2.1"
xdoctest = {extras = ["colors"], version = "1.1.4"}


[tool.poetry.scripts]
salt-gnupg-rotate = "salt_gnupg_rotate.cli:cli"

[tool.poetry.urls]
Changelog = "https://github.com/raddessi/salt-gnupg-rotate/releases"

[tool.poetry.group.dev.dependencies]
ipython = [
    {version = ">=8.20.0", python = ">=3.10"},
]
sphinx = ">4"
pytest-mock = "^3.12.0"
typeguard = "^4.0.0"
sphinxcontrib-asciinema = "^0.4.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

## Config for other tools
[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py38"
exclude = [
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "tests/fixtures",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "T201"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN",
    "PL",
    "TD002",
    "TD003",
    "FIX002",
    "D203",  # no-blank-line-before-class
    "D213",  # multi-line-summary-second-line
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["test_*"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
# Needed to support python 3.8 annotation syntax
keep-runtime-typing = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"

[tool.coverage.html]
directory = "build/coverage"

[tool.coverage.json]
output = "build/coverage.json"

[tool.coverage.paths]
source = ["salt_gnupg_rotate", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["salt_gnupg_rotate"]
parallel = true

[tool.coverage.report]
show_missing = true
precision = 2
fail_under = 100
# omit = [
#   "configuration_files",
# ]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
# exclude = "somedir/"

[tool.pytest.ini_options]
# `log_cli` would be AMAZING to enable but it currently conflicts with click's CliRunner
log_cli = false
norecursedirs = [
    ".git",
    ".tox",
    ".env",
    "dist",
    "build",
]
python_files = [
    "test_*.py",
    "*_test.py",
    "tests.py",
]
addopts = [
    "-rsx",
    "-vv",
]
testpaths = [
    "tests",
]

[tool.semantic_release]
version_toml = [
    "pyproject.toml:tool.poetry.version",
]
version_variables = [
    "salt_gnupg_rotate/__init__.py:__version__",
]
branch = "main"
upload_to_vcs_release = false
build_command = "poetry build"
